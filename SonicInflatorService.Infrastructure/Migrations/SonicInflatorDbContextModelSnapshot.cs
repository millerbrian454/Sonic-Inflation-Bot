// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SonicInflatorService.Infrastructure.Data;

#nullable disable

namespace SonicInflatorService.Infrastructure.Migrations
{
    [DbContext(typeof(SonicInflatorDbContext))]
    partial class SonicInflatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SonicInflatorService.Core.Entities.ConfigurationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Section")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Section")
                        .IsUnique()
                        .HasFilter("[Section] IS NOT NULL");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordChannelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DiscordConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscordConfigurationId");

                    b.ToTable("DiscordChannels");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordConfigurationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CurseYeHaMeHaImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeflatedImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("InflatedImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("MimicUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PrimaryChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("RandomChannelPercentageChance")
                        .HasColumnType("int");

                    b.Property<int>("RandomIntervalMinutesMaxValue")
                        .HasColumnType("int");

                    b.Property<int>("RandomIntervalMinutesMinValue")
                        .HasColumnType("int");

                    b.Property<int>("ResponseCooldownIntervalSeconds")
                        .HasColumnType("int");

                    b.Property<decimal>("SirenEmojiId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("SirenEmojiName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SonichuImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("DiscordConfigurations");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordContextChannelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DiscordConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscordConfigurationId");

                    b.ToTable("DiscordContextChannels");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordProfessionalWranglerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DiscordConfigurationId")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("DiscordConfigurationId");

                    b.ToTable("DiscordProfessionalWranglers");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.OpenAIConfigurationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BaseUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("OpenAIConfigurations");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.OpenAIModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OpenAIConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpenAIConfigurationId");

                    b.ToTable("OpenAIModels");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordChannelEntity", b =>
                {
                    b.HasOne("SonicInflatorService.Core.Entities.DiscordConfigurationEntity", "DiscordConfiguration")
                        .WithMany("ChannelIds")
                        .HasForeignKey("DiscordConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordConfiguration");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordContextChannelEntity", b =>
                {
                    b.HasOne("SonicInflatorService.Core.Entities.DiscordConfigurationEntity", "DiscordConfiguration")
                        .WithMany("ContextChannelIds")
                        .HasForeignKey("DiscordConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordConfiguration");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordProfessionalWranglerEntity", b =>
                {
                    b.HasOne("SonicInflatorService.Core.Entities.DiscordConfigurationEntity", "DiscordConfiguration")
                        .WithMany("ProfessionalSonicWranglerUserIds")
                        .HasForeignKey("DiscordConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordConfiguration");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.OpenAIModelEntity", b =>
                {
                    b.HasOne("SonicInflatorService.Core.Entities.OpenAIConfigurationEntity", "OpenAIConfiguration")
                        .WithMany("Models")
                        .HasForeignKey("OpenAIConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenAIConfiguration");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.DiscordConfigurationEntity", b =>
                {
                    b.Navigation("ChannelIds");

                    b.Navigation("ContextChannelIds");

                    b.Navigation("ProfessionalSonicWranglerUserIds");
                });

            modelBuilder.Entity("SonicInflatorService.Core.Entities.OpenAIConfigurationEntity", b =>
                {
                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
