name: Deploy to Windows Server

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [ closed ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './SonicInflatorService/SonicInflatorService.csproj'
  PUBLISH_PATH: './publish'
  SERVICE_NAME: 'SonicInflatorService'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Substitute Connection String in appsettings
      run: |
        # Replace placeholder with actual connection string
        sed -i 's|{{DATABASE_CONNECTION_STRING}}|${{ secrets.DATABASE_CONNECTION_STRING }}|g' ./SonicInflatorService/appsettings.json
        
        # Verify substitution worked (without exposing the secret)
        if grep -q "{{DATABASE_CONNECTION_STRING}}" ./SonicInflatorService/appsettings.json; then
          echo "❌ Connection string substitution failed"
          exit 1
        else
          echo "✅ Connection string substituted successfully"
        fi

    - name: Publish
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --runtime win-x64 \
          --self-contained true \
          --output ${{ env.PUBLISH_PATH }} \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}

    - name: Deploy to Windows Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        script: |
          # Stop the service if it's running
          if (Get-Service -Name "${{ env.SERVICE_NAME }}" -ErrorAction SilentlyContinue) {
            Write-Host "Stopping ${{ env.SERVICE_NAME }} service..."
            Stop-Service -Name "${{ env.SERVICE_NAME }}" -Force
            Start-Sleep -Seconds 10
          }
          
          # Create deployment directory if it doesn't exist
          $deployPath = "C:\Services\${{ env.SERVICE_NAME }}"
          if (!(Test-Path $deployPath)) {
            New-Item -ItemType Directory -Path $deployPath -Force
          }
          
          # Backup current version
          $backupPath = "C:\Services\Backups\${{ env.SERVICE_NAME }}_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
          if (Test-Path "$deployPath\*") {
            New-Item -ItemType Directory -Path $backupPath -Force
            Copy-Item -Path "$deployPath\*" -Destination $backupPath -Recurse -Force
            Write-Host "Backup created at: $backupPath"
          }
          
          # Clear deployment directory
          Remove-Item -Path "$deployPath\*" -Recurse -Force -ErrorAction SilentlyContinue

    - name: Copy files to Windows Server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        source: "${{ env.PUBLISH_PATH }}/*"
        target: "C:/Services/${{ env.SERVICE_NAME }}/"
        strip_components: 1

    - name: Install and start Windows service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        script: |
          # Set production environment
          [Environment]::SetEnvironmentVariable("ASPNETCORE_ENVIRONMENT", "Production", "Machine")
          
          # Install/Update Windows Service
          $deployPath = "C:\Services\${{ env.SERVICE_NAME }}"
          $servicePath = "$deployPath\${{ env.SERVICE_NAME }}.exe"
          if (Get-Service -Name "${{ env.SERVICE_NAME }}" -ErrorAction SilentlyContinue) {
            Write-Host "Updating existing service..."
            sc.exe config "${{ env.SERVICE_NAME }}" binpath= $servicePath
          } else {
            Write-Host "Installing new service..."
            sc.exe create "${{ env.SERVICE_NAME }}" binpath= $servicePath start= auto
            sc.exe description "${{ env.SERVICE_NAME }}" "Sonic Inflator Discord Bot Service"
          }
          
          # Start the service
          Start-Service -Name "${{ env.SERVICE_NAME }}"
          
          # Verify service is running
          Start-Sleep -Seconds 5
          $service = Get-Service -Name "${{ env.SERVICE_NAME }}"
          if ($service.Status -eq "Running") {
            Write-Host "✅ Service ${{ env.SERVICE_NAME }} deployed and started successfully!"
          } else {
            Write-Error "❌ Service failed to start. Status: $($service.Status)"
            exit 1
          }

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
