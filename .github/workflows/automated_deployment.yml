name: Deploy to Windows Server

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [ closed ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './SonicInflatorService/SonicInflatorService.csproj'
  PUBLISH_PATH: './publish'
  SERVICE_NAME: 'SonicInflatorService'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Substitute Connection String in appsettings
      run: |
        # Replace placeholder with actual connection string
        sed -i 's|{{DATABASE_CONNECTION_STRING}}|${{ secrets.DATABASE_CONNECTION_STRING }}|g' ./SonicInflatorService/appsettings.json
        
        # Verify substitution worked (without exposing the secret)
        if grep -q "{{DATABASE_CONNECTION_STRING}}" ./SonicInflatorService/appsettings.json; then
          echo "❌ Connection string substitution failed"
          exit 1
        else
          echo "✅ Connection string substituted successfully"
        fi

    - name: Publish
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --runtime win-x64 \
          --self-contained true \
          --output ${{ env.PUBLISH_PATH }} \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ${{ env.PUBLISH_PATH }}
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        timeout: 30s
        script: |
          echo "SSH connection successful"
          echo %DATE% %TIME%
          whoami

    - name: Stop Service and Prepare Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        script_stop: true
        script: |
          powershell -Command "Get-Service '${{ env.SERVICE_NAME }}' -EA SilentlyContinue | Where-Object {$_.Status -eq 'Running'} | Stop-Service -Force"
          powershell -Command "New-Item -ItemType Directory -Path 'C:\Services\${{ env.SERVICE_NAME }}' -Force -EA SilentlyContinue"
          powershell -Command "New-Item -ItemType Directory -Path 'C:\Services\Backups' -Force -EA SilentlyContinue"
          powershell -Command "$timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'; Write-Host $timestamp"
          powershell -Command "$backup = 'C:\Services\Backups\${{ env.SERVICE_NAME }}_' + (Get-Date -Format 'yyyyMMdd_HHmmss'); if (Test-Path 'C:\Services\${{ env.SERVICE_NAME }}\*') { New-Item -ItemType Directory -Path $backup -Force; Copy-Item 'C:\Services\${{ env.SERVICE_NAME }}\*' $backup -Recurse -Force }"
          powershell -Command "Remove-Item 'C:\Services\${{ env.SERVICE_NAME }}\*' -Recurse -Force -EA SilentlyContinue"

    - name: Copy files to Windows Server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        source: "${{ env.PUBLISH_PATH }}/*"
        target: "C:/Services/${{ env.SERVICE_NAME }}/"
        strip_components: 1

    - name: Install/Update and Start Windows Service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.WINDOWS_SERVER_HOST }}
        username: ${{ secrets.WINDOWS_SERVER_USERNAME }}
        password: ${{ secrets.WINDOWS_SERVER_PASSWORD }}
        port: ${{ secrets.WINDOWS_SERVER_SSH_PORT }}
        script_stop: true
        script: |
          powershell -Command "[Environment]::SetEnvironmentVariable('ASPNETCORE_ENVIRONMENT', 'Production', 'Machine')"
          powershell -Command "if (!(Test-Path 'C:\Services\${{ env.SERVICE_NAME }}\${{ env.SERVICE_NAME }}.exe')) { Write-Host 'Executable not found'; Get-ChildItem 'C:\Services\${{ env.SERVICE_NAME }}'; exit 1 }"
          powershell -Command "$exePath = 'C:\Services\${{ env.SERVICE_NAME }}\${{ env.SERVICE_NAME }}.exe'"
          powershell -Command "if (Get-Service '${{ env.SERVICE_NAME }}' -EA SilentlyContinue) { Write-Host 'Updating service'; sc.exe config '${{ env.SERVICE_NAME }}' binpath= $exePath } else { Write-Host 'Creating service'; sc.exe create '${{ env.SERVICE_NAME }}' binpath= $exePath start= auto }"
          powershell -Command "sc.exe description '${{ env.SERVICE_NAME }}' 'Sonic Inflator Discord Bot Service'"
          powershell -Command "Start-Service '${{ env.SERVICE_NAME }}'"
          powershell -Command "Start-Sleep 5"
          powershell -Command "$svc = Get-Service '${{ env.SERVICE_NAME }}'; if ($svc.Status -eq 'Running') { Write-Host 'Service started successfully' } else { Write-Host 'Service failed. Status:' $svc.Status; exit 1 }"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
